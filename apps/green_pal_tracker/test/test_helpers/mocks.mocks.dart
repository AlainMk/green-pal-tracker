// Mocks generated by Mockito 5.4.4 from annotations
// in green_pal_tracker/test/test_helpers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:green_pal_tracker/graph/data/api/graph_api.dart' as _i5;
import 'package:green_pal_tracker/graph/data/db/graph_local_db.dart' as _i7;
import 'package:green_pal_tracker/graph/data/models/graph_data.dart' as _i8;
import 'package:green_pal_tracker/graph/data/repository/graph_repository.dart'
    as _i10;
import 'package:green_pal_tracker/graph/data/utils/graph_utils.dart' as _i11;
import 'package:green_pal_tracker/shared/manager/cache_manager.dart' as _i9;
import 'package:green_pal_tracker/shared/models/repository_error.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRepositoryError_2 extends _i1.SmartFake
    implements _i4.RepositoryError {
  _FakeRepositoryError_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GraphApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphApi extends _i1.Mock implements _i5.GraphApi {
  MockGraphApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Response<dynamic>> getMonitoringData(
    String? type,
    String? date,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonitoringData,
          [
            type,
            date,
          ],
        ),
        returnValue:
            _i6.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #getMonitoringData,
            [
              type,
              date,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [GraphLocalDB].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphLocalDB extends _i1.Mock implements _i7.GraphLocalDB {
  MockGraphLocalDB() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveData(
    String? key,
    List<_i8.GraphData>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveData,
          [
            key,
            data,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  List<_i8.GraphData>? getDataIfFresh(
    String? key, {
    int? freshnessMs = 10000,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getDataIfFresh,
        [key],
        {#freshnessMs: freshnessMs},
      )) as List<_i8.GraphData>?);

  @override
  List<_i8.GraphData>? getData(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getData,
        [key],
      )) as List<_i8.GraphData>?);

  @override
  _i6.Future<void> clearData() => (super.noSuchMethod(
        Invocation.method(
          #clearData,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i9.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i4.RepositoryError, List<T>>> fetchAndCacheData<T>({
    required String? cacheKey,
    required _i6.Future<_i2.Response<dynamic>> Function()? fetchFromApi,
    required dynamic Function()? getFromDb,
    required _i6.Future<void> Function(List<T>)? saveToDb,
    required List<T> Function(dynamic)? fromJson,
    dynamic Function()? getFreshDataFromDb,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAndCacheData,
          [],
          {
            #cacheKey: cacheKey,
            #fetchFromApi: fetchFromApi,
            #getFromDb: getFromDb,
            #saveToDb: saveToDb,
            #fromJson: fromJson,
            #getFreshDataFromDb: getFreshDataFromDb,
          },
        ),
        returnValue: _i6.Future<_i3.Either<_i4.RepositoryError, List<T>>>.value(
            _FakeEither_1<_i4.RepositoryError, List<T>>(
          this,
          Invocation.method(
            #fetchAndCacheData,
            [],
            {
              #cacheKey: cacheKey,
              #fetchFromApi: fetchFromApi,
              #getFromDb: getFromDb,
              #saveToDb: saveToDb,
              #fromJson: fromJson,
              #getFreshDataFromDb: getFreshDataFromDb,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i4.RepositoryError, List<T>>>);

  @override
  _i4.RepositoryError handleError({
    required String? location,
    required dynamic error,
    required StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [],
          {
            #location: location,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _FakeRepositoryError_2(
          this,
          Invocation.method(
            #handleError,
            [],
            {
              #location: location,
              #error: error,
              #stackTrace: stackTrace,
            },
          ),
        ),
      ) as _i4.RepositoryError);
}

/// A class which mocks [GraphRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphRepository extends _i1.Mock implements _i10.GraphRepository {
  MockGraphRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<
      _i3.Either<_i4.RepositoryError, List<_i8.GraphData>>> getMonitoringData(
    _i11.GraphType? type, {
    DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonitoringData,
          [type],
          {#date: date},
        ),
        returnValue: _i6
            .Future<_i3.Either<_i4.RepositoryError, List<_i8.GraphData>>>.value(
            _FakeEither_1<_i4.RepositoryError, List<_i8.GraphData>>(
          this,
          Invocation.method(
            #getMonitoringData,
            [type],
            {#date: date},
          ),
        )),
      ) as _i6.Future<_i3.Either<_i4.RepositoryError, List<_i8.GraphData>>>);

  @override
  _i6.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i4.RepositoryError handleError({
    required String? location,
    required dynamic error,
    required StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [],
          {
            #location: location,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _FakeRepositoryError_2(
          this,
          Invocation.method(
            #handleError,
            [],
            {
              #location: location,
              #error: error,
              #stackTrace: stackTrace,
            },
          ),
        ),
      ) as _i4.RepositoryError);
}
